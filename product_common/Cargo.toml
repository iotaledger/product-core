[package]
name = "product_common"
version = "1.6.0-alpha"
authors.workspace = true
edition.workspace = true
homepage.workspace = true
license.workspace = true
repository.workspace = true
rust-version.workspace = true
description = "Sources shared by IOTA products."
keywords = ["iota", "tangle"]
readme = "./README.md"

[dependencies]
anyhow.workspace = true
async-trait.workspace = true
cfg-if.workspace = true
itertools = { version = "0.13.0", optional = true }
lazy_static = { version = "1.5.0", optional = true }
phf.workspace = true
secret-storage = { git = "https://github.com/iotaledger/secret-storage.git", tag = "v0.3.0", optional = true }
serde.workspace = true
serde_json.workspace = true
strum.workspace = true
thiserror.workspace = true

iota-keys = { git = "https://github.com/iotaledger/iota.git", package = "iota-keys", tag = "v0.12.0-rc", optional = true }

[dependencies.identity_jose]
git = "https://github.com/iotaledger/identity.rs.git"
branch = "feat/identity-rebased-alpha-public-interaction-rust"
package = "identity_jose"
optional = true

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
iota_interaction = { version = "=1.6.0-alpha", path = "../iota_interaction", features = [
    "keytool",
] }
iota_interaction_rust = { version = "=1.6.0-alpha", path = "../iota_interaction_rust", optional = true }
iota-sdk.workspace = true
tokio = { version = "1", default-features = false, features = ["process"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
iota_interaction = { version = "=1.6.0-alpha", path = "../iota_interaction", default-features = false }
iota_interaction_ts = { version = "=1.6.0-alpha", path = "../bindings/wasm/iota_interaction_ts" }


[features]
default = []
send-sync = ["secret-storage/send-sync-storage"]
test-utils = [
    "dep:identity_jose",
    "dep:lazy_static",
    "dep:secret-storage",
    "dep:iota-keys",
]
core-client = ["dep:secret-storage"]
transaction = [
    "core-client",
    "dep:iota_interaction_rust",
    "dep:itertools",
    "dep:secret-storage",
]

[package.metadata.docs.rs]
# To build locally:
# RUSTDOCFLAGS="--cfg docsrs" cargo +nightly doc --all-features --no-deps --workspace --open
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[lints.clippy]
result_large_err = "allow"

[lints.rust]
# from local sdk types
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(msim)'] }
