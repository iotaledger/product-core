// Copyright 2020-2021 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

import {Client, Config, Presentation, SignatureOptions, VerifierOptions} from '@iota/identity-wasm';
import {createVC} from './create_vc';

/**
 This example shows how to create a Verifiable Presentation and validate it.
 A Verifiable Presentation is the format in which a (collection of) Verifiable Credential(s) gets shared.
 It is signed by the subject, to prove control over the Verifiable Credential with a nonce or timestamp.

 @param {{network: Network, explorer: ExplorerUrl}} clientConfig
 **/
async function createVP(clientConfig) {
    // Create a default client configuration from the parent config network.
    const config = Config.fromNetwork(clientConfig.network);

    // Create a client instance to publish messages to the Tangle.
    const client = Client.fromConfig(config);

    // Creates new identities (See "createVC" example)
    const {alice, signedVc} = await createVC(clientConfig);

    // Create a Verifiable Presentation from the Credential
    const unsignedVp = new Presentation(alice.doc, signedVc.toJSON())

    // Sign the presentation with the holders private key.
    //
    // Optionally include a challenge from the requester in the signature.
    // A unique random challenge generated by the requester per presentation can mitigate replay attacks
    // (along with other properties like `expires` and `domain`).
    const signedVp = alice.doc.signPresentation(unsignedVp, {
        method: "#sign-0",
        private: alice.key.private,
    }, new SignatureOptions({
        challenge: "475a7984-1bb5-4c4c-a56f-822bccd46440"
    }))

    // Validate the presentation and all the credentials included in it.
    //
    // Also verify the challenge matches.
    const result = await client.checkPresentation(signedVp.toString(), new VerifierOptions({
        challenge: "475a7984-1bb5-4c4c-a56f-822bccd46440"
    }));

    console.log(`VP verification result: ${result.verified}`);
}

export {createVP};
